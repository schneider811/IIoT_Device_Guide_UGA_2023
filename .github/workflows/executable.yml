name: Executable

on:
  # push:
  #   branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
env:
  file_to_build: build_executable.py
  pi_image: raspios_lite_arm64:latest 
  path_to_file: IIoT_Device_Guide_UGA_2023/build_executable
  built_file_name: built_file


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@main
      with: 
        lfs: true
    - name: checkout lfs object
      run: git lfs checkout
    - name: all_together
      uses: pguyot/arm-runner-action@main
      id: all_together
      with:
        image_additional_mb: 3584
        copy_repository_path: /home/pi
        copy_artifact_path: ${{env.path_to_file}}/dist/${{env.built_file_name}}
        base_image: ${{env.pi_image}}
        commands: |
            sudo apt-get update -y;
            pwd;
            apt-get install -y python3 python3-venv python3-dev python3-pip; 
            cd ${{env.path_to_file}};
            pip3 install requests;
            pip3 install --upgrade pip;
            pip3 install pyinstaller;
            pip3 install mmh3;
            pyinstaller --clean --onefile ${{env.file_to_build}} -n built_file;
    - uses: actions/upload-artifact@main
      with:
        name: exe_file
        path: ${{env.built_file_name}}
        if-no-files-found: error
        retention-days: 3

# Lines 55-68 can be used to also upload the .exe file automatically to the raspberry pi if you install the raspberry pi as a github runner. Having the raspberry pi as a runner can create some security risks though. If it is used the repository must be private. Additionally this will only work for one raspberry pi - there are solutions where you could upload to multiple raspberry pi's at once but they would be difficult to implement. One solution could be a matrix job and having the github server to ssh into each raspberry pi
  # upload:
  #   runs-on: raspi
  #   needs: build
  #   steps: 
  #     - name: Checkout repo
  #       uses: actions/checkout@main
  #     - uses: actions/download-artifact@main
  #       with:
  #         name: exe_file
  #     - run: cp ${{env.built_file_name}} /home/pi/
  #     - run: cd /home/pi
  #     - run: chmod +x ${{env.built_file_name}}
  #     # - run: ./${{env.built_file_name}} --label_name=S --dropout=0.1 --train=10min_train.npy --test=10min_test.npy due to the large file size of the example training and test data
  #     # they cannot be added to the repository therefore it errors out when this tries to run. Fear not! simply ssh into the machine and run the code it should work just fine

